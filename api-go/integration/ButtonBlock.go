// PLEASE DO NOT EDIT THIS FILE, THIS IS GENERATED BY NATIVEBLOCKS

package integration

type ButtonBlockProperty struct {
	Key          string `json:"key"`
	ValueMobile  string `json:"valueMobile"`
	ValueTablet  string `json:"valueTablet"`
	ValueDesktop string `json:"valueDesktop"`
	Type         string `json:"type"`
}

type ButtonBlockData struct {
	Key   string `json:"key"`
	Value string `json:"value"`
	Type  string `json:"type"`
}

type ButtonBlockAction struct {
	Event    string        `json:"event"`
	Triggers []interface{} `json:"triggers"`
}

type ButtonBlockSlot struct {
	Slot string `json:"slot"`
}

type ButtonBlockEvent struct {
	Event string `json:"event"`
}

type ButtonBlock struct {
	keyType            string
	integrationVersion int
	properties         []ButtonBlockProperty
	data               []ButtonBlockData
	events             []ButtonBlockEvent
	actions            []ButtonBlockAction
	blocks             []interface{}
	slots              []ButtonBlockSlot
	visibilityKey      string
	slot               string
	key                string
}

func NewButtonBlock(_key string, _visibilityKey string, _slot string) ButtonBlock {
	c := ButtonBlock{}
	c.keyType = "BUTTON"
	c.key = _key
	c.visibilityKey = _visibilityKey
	c.slot = _slot
	c.actions = make([]ButtonBlockAction, 0)
	c.blocks = make([]interface{}, 0)
	initialProperties := []ButtonBlockProperty{
		{Key: "width", ValueMobile: "wrap", ValueTablet: "wrap", ValueDesktop: "wrap", Type: "STRING"},
		{Key: "height", ValueMobile: "wrap", ValueTablet: "wrap", ValueDesktop: "wrap", Type: "STRING"},
		{Key: "contentColor", ValueMobile: "#FFFFFFFF", ValueTablet: "#FFFFFFFF", ValueDesktop: "#FFFFFFFF", Type: "STRING"},
		{Key: "disabledContentColor", ValueMobile: "#FFFFFFB2", ValueTablet: "#FFFFFFB2", ValueDesktop: "#FFFFFFB2", Type: "STRING"},
		{Key: "backgroundColor", ValueMobile: "#FF212121", ValueTablet: "#FF212121", ValueDesktop: "#FF212121", Type: "STRING"},
		{Key: "disableBackgroundColor", ValueMobile: "#212121B2", ValueTablet: "#212121B2", ValueDesktop: "#212121B2", Type: "STRING"},
		{Key: "borderColor", ValueMobile: "#FF212121", ValueTablet: "#FF212121", ValueDesktop: "#FF212121", Type: "STRING"},
		{Key: "disableBorderColor", ValueMobile: "#212121B2", ValueTablet: "#212121B2", ValueDesktop: "#212121B2", Type: "STRING"},
		{Key: "paddingStart", ValueMobile: "4.0", ValueTablet: "4.0", ValueDesktop: "4.0", Type: "DOUBLE"},
		{Key: "paddingTop", ValueMobile: "4.0", ValueTablet: "4.0", ValueDesktop: "4.0", Type: "DOUBLE"},
		{Key: "paddingEnd", ValueMobile: "4.0", ValueTablet: "4.0", ValueDesktop: "4.0", Type: "DOUBLE"},
		{Key: "paddingBottom", ValueMobile: "4.0", ValueTablet: "4.0", ValueDesktop: "4.0", Type: "DOUBLE"},
		{Key: "contentPaddingStart", ValueMobile: "4.0", ValueTablet: "4.0", ValueDesktop: "4.0", Type: "DOUBLE"},
		{Key: "contentPaddingTop", ValueMobile: "4.0", ValueTablet: "4.0", ValueDesktop: "4.0", Type: "DOUBLE"},
		{Key: "contentPaddingEnd", ValueMobile: "4.0", ValueTablet: "4.0", ValueDesktop: "4.0", Type: "DOUBLE"},
		{Key: "contentPaddingBottom", ValueMobile: "4.0", ValueTablet: "4.0", ValueDesktop: "4.0", Type: "DOUBLE"},
		{Key: "radiusTopStart", ValueMobile: "4.0", ValueTablet: "4.0", ValueDesktop: "4.0", Type: "DOUBLE"},
		{Key: "radiusTopEnd", ValueMobile: "4.0", ValueTablet: "4.0", ValueDesktop: "4.0", Type: "DOUBLE"},
		{Key: "radiusBottomStart", ValueMobile: "4.0", ValueTablet: "4.0", ValueDesktop: "4.0", Type: "DOUBLE"},
		{Key: "radiusBottomEnd", ValueMobile: "4.0", ValueTablet: "4.0", ValueDesktop: "4.0", Type: "DOUBLE"},
		{Key: "fontSize", ValueMobile: "14.0", ValueTablet: "14.0", ValueDesktop: "14.0", Type: "DOUBLE"},
		{Key: "fontFamily", ValueMobile: "default", ValueTablet: "default", ValueDesktop: "default", Type: "STRING"},
		{Key: "textAlign", ValueMobile: "start", ValueTablet: "start", ValueDesktop: "start", Type: "STRING"},
		{Key: "fontWeight", ValueMobile: "normal", ValueTablet: "normal", ValueDesktop: "normal", Type: "STRING"},
	}
	c.properties = initialProperties

	initialData := []ButtonBlockData{
		{Key: "text", Value: "", Type: "STRING"},
		{Key: "enable", Value: "", Type: "BOOLEAN"},
	}
	c.data = initialData

	initialSlots := []ButtonBlockSlot{
		{Slot: "onLeadingIcon"},
		{Slot: "onTrailingIcon"},
	}
	c.slots = initialSlots

	initialEvents := []ButtonBlockEvent{
		{Event: "onClick"},
	}
	c.events = initialEvents

	return c
}

func (c *ButtonBlock) isValidEvent(eventName string) bool {
	for _, e := range c.events {
		if e.Event == eventName {
			return true
		}
	}
	return false
}

func (c *ButtonBlock) isValidBlock(block interface{}) bool {
	if block == nil {
		return false
	}
	m, ok := block.(map[string]interface{})
	if !ok {
		return false
	}
	_, hasKey := m["key"]
	_, hasKeyType := m["keyType"]
	return hasKey && hasKeyType
}

func (c *ButtonBlock) AddAction(event string, triggers []interface{}) *ButtonBlock {
	if !c.isValidEvent(event) {
		var eventNames string
		for _, ev := range c.events {
			eventNames += ev.Event
		}
		panic("Invalid event: " + event + ". Must be one of: " + eventNames)
	}
	action := ButtonBlockAction{Event: event, Triggers: triggers}
	c.actions = append(c.actions, action)
	return c
}

func (c *ButtonBlock) AddBlock(block interface{}) *ButtonBlock {
	if !c.isValidBlock(block) {
		panic("Invalid block: Block must be a map with at least key and keyType")
	}
	c.blocks = append(c.blocks, block)
	return c
}

func (c *ButtonBlock) ModifyProperty(key, valueMobile, valueTablet, valueDesktop string) *ButtonBlock {
	for i, p := range c.properties {
		if p.Key == key {
			c.properties[i].ValueMobile = valueMobile
			c.properties[i].ValueTablet = valueTablet
			c.properties[i].ValueDesktop = valueDesktop
			break
		}
	}
	return c
}

func (c *ButtonBlock) AssignData(key, value string) *ButtonBlock {
	for i, d := range c.data {
		if d.Key == key {
			c.data[i].Value = value
			break
		}
	}
	return c
}

func (c *ButtonBlock) Build() map[string]interface{} {
	result := map[string]interface{}{
		"keyType":            c.keyType,
		"integrationVersion": c.integrationVersion,
		"properties":         c.properties,
		"data":               c.data,
		"key":                c.key,
		"visibilityKey":      c.visibilityKey,
		"slot":               c.slot,
		"slots":              c.slots,
		"actions":            c.actions,
		"blocks":             c.blocks,
	}
	return result
}
