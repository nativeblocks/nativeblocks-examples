// PLEASE DO NOT EDIT THIS FILE, THIS IS GENERATED BY NATIVEBLOCKS

package integration

type RowBlockProperty struct {
	Key          string `json:"key"`
	ValueMobile  string `json:"valueMobile"`
	ValueTablet  string `json:"valueTablet"`
	ValueDesktop string `json:"valueDesktop"`
	Type         string `json:"type"`
}

type RowBlockData struct {
	Key   string `json:"key"`
	Value string `json:"value"`
	Type  string `json:"type"`
}

type RowBlockAction struct {
	Event    string        `json:"event"`
	Triggers []interface{} `json:"triggers"`
}

type RowBlockSlot struct {
	Slot string `json:"slot"`
}

type RowBlockEvent struct {
	Event string `json:"event"`
}

type RowBlock struct {
	keyType            string
	integrationVersion int
	properties         []RowBlockProperty
	data               []RowBlockData
	events             []RowBlockEvent
	actions            []RowBlockAction
	blocks             []interface{}
	slots              []RowBlockSlot
	visibilityKey      string
	slot               string
	key                string
}

func NewRowBlock(_key string, _visibilityKey string, _slot string) RowBlock {
	c := RowBlock{}
	c.keyType = "ROW"
	c.key = _key
	c.visibilityKey = _visibilityKey
	c.slot = _slot
	c.actions = make([]RowBlockAction, 0)
	c.blocks = make([]interface{}, 0)
	initialProperties := []RowBlockProperty{
		{Key: "horizontalArrangement", ValueMobile: "start", ValueTablet: "start", ValueDesktop: "start", Type: "STRING"},
		{Key: "verticalAlignment", ValueMobile: "top", ValueTablet: "top", ValueDesktop: "top", Type: "STRING"},
		{Key: "width", ValueMobile: "wrap", ValueTablet: "wrap", ValueDesktop: "wrap", Type: "STRING"},
		{Key: "height", ValueMobile: "wrap", ValueTablet: "wrap", ValueDesktop: "wrap", Type: "STRING"},
		{Key: "paddingStart", ValueMobile: "8.0", ValueTablet: "8.0", ValueDesktop: "8.0", Type: "DOUBLE"},
		{Key: "paddingTop", ValueMobile: "8.0", ValueTablet: "8.0", ValueDesktop: "8.0", Type: "DOUBLE"},
		{Key: "paddingEnd", ValueMobile: "8.0", ValueTablet: "8.0", ValueDesktop: "8.0", Type: "DOUBLE"},
		{Key: "paddingBottom", ValueMobile: "8.0", ValueTablet: "8.0", ValueDesktop: "8.0", Type: "DOUBLE"},
		{Key: "background", ValueMobile: "#ffffffff", ValueTablet: "#ffffffff", ValueDesktop: "#ffffffff", Type: "STRING"},
		{Key: "direction", ValueMobile: "LTR", ValueTablet: "LTR", ValueDesktop: "LTR", Type: "STRING"},
	}
	c.properties = initialProperties

	initialData := []RowBlockData{}
	c.data = initialData

	initialSlots := []RowBlockSlot{
		{Slot: "content"},
	}
	c.slots = initialSlots

	initialEvents := []RowBlockEvent{
		{Event: "onClick"},
	}
	c.events = initialEvents

	return c
}

func (c *RowBlock) isValidEvent(eventName string) bool {
	for _, e := range c.events {
		if e.Event == eventName {
			return true
		}
	}
	return false
}

func (c *RowBlock) isValidBlock(block interface{}) bool {
	if block == nil {
		return false
	}
	m, ok := block.(map[string]interface{})
	if !ok {
		return false
	}
	_, hasKey := m["key"]
	_, hasKeyType := m["keyType"]
	return hasKey && hasKeyType
}

func (c *RowBlock) AddAction(event string, triggers []interface{}) *RowBlock {
	if !c.isValidEvent(event) {
		var eventNames string
		for _, ev := range c.events {
			eventNames += ev.Event
		}
		panic("Invalid event: " + event + ". Must be one of: " + eventNames)
	}
	action := RowBlockAction{Event: event, Triggers: triggers}
	c.actions = append(c.actions, action)
	return c
}

func (c *RowBlock) AddBlock(block interface{}) *RowBlock {
	if !c.isValidBlock(block) {
		panic("Invalid block: Block must be a map with at least key and keyType")
	}
	c.blocks = append(c.blocks, block)
	return c
}

func (c *RowBlock) ModifyProperty(key, valueMobile, valueTablet, valueDesktop string) *RowBlock {
	for i, p := range c.properties {
		if p.Key == key {
			c.properties[i].ValueMobile = valueMobile
			c.properties[i].ValueTablet = valueTablet
			c.properties[i].ValueDesktop = valueDesktop
			break
		}
	}
	return c
}

func (c *RowBlock) Build() map[string]interface{} {
	result := map[string]interface{}{
		"keyType":            c.keyType,
		"integrationVersion": c.integrationVersion,
		"properties":         c.properties,
		"data":               c.data,
		"key":                c.key,
		"visibilityKey":      c.visibilityKey,
		"slot":               c.slot,
		"slots":              c.slots,
		"actions":            c.actions,
		"blocks":             c.blocks,
	}
	return result
}
