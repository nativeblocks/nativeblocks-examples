// PLEASE DO NOT EDIT THIS FILE, THIS IS GENERATED BY NATIVEBLOCKS

package integration

type TextBlockProperty struct {
	Key          string `json:"key"`
	ValueMobile  string `json:"valueMobile"`
	ValueTablet  string `json:"valueTablet"`
	ValueDesktop string `json:"valueDesktop"`
	Type         string `json:"type"`
}

type TextBlockData struct {
	Key   string `json:"key"`
	Value string `json:"value"`
	Type  string `json:"type"`
}

type TextBlockAction struct {
	Event    string        `json:"event"`
	Triggers []interface{} `json:"triggers"`
}

type TextBlockSlot struct {
	Slot string `json:"slot"`
}

type TextBlockEvent struct {
	Event string `json:"event"`
}

type TextBlock struct {
	keyType            string
	integrationVersion int
	properties         []TextBlockProperty
	data               []TextBlockData
	events             []TextBlockEvent
	actions            []TextBlockAction
	blocks             []interface{}
	slots              []TextBlockSlot
	visibilityKey      string
	slot               string
	key                string
}

func NewTextBlock(_key string, _visibilityKey string, _slot string) TextBlock {
	c := TextBlock{}
	c.keyType = "TEXT"
	c.key = _key
	c.visibilityKey = _visibilityKey
	c.slot = _slot
	c.actions = make([]TextBlockAction, 0)
	c.blocks = make([]interface{}, 0)
	initialProperties := []TextBlockProperty{
		{Key: "fontWeight", ValueMobile: "normal", ValueTablet: "normal", ValueDesktop: "normal", Type: "STRING"},
		{Key: "overflow", ValueMobile: "clip", ValueTablet: "clip", ValueDesktop: "clip", Type: "STRING"},
		{Key: "minLines", ValueMobile: "1", ValueTablet: "1", ValueDesktop: "1", Type: "INT"},
		{Key: "maxLines", ValueMobile: "9999", ValueTablet: "9999", ValueDesktop: "9999", Type: "INT"},
		{Key: "width", ValueMobile: "wrap", ValueTablet: "wrap", ValueDesktop: "wrap", Type: "STRING"},
		{Key: "height", ValueMobile: "wrap", ValueTablet: "wrap", ValueDesktop: "wrap", Type: "STRING"},
		{Key: "fontFamily", ValueMobile: "default", ValueTablet: "default", ValueDesktop: "default", Type: "STRING"},
		{Key: "fontSize", ValueMobile: "14.0", ValueTablet: "14.0", ValueDesktop: "14.0", Type: "DOUBLE"},
		{Key: "textColor", ValueMobile: "#ffffffff", ValueTablet: "#ffffffff", ValueDesktop: "#ffffffff", Type: "STRING"},
		{Key: "textAlign", ValueMobile: "start", ValueTablet: "start", ValueDesktop: "start", Type: "STRING"},
	}
	c.properties = initialProperties

	initialData := []TextBlockData{
		{Key: "text", Value: "", Type: "STRING"},
	}
	c.data = initialData

	initialSlots := []TextBlockSlot{}
	c.slots = initialSlots

	initialEvents := []TextBlockEvent{}
	c.events = initialEvents

	return c
}

func (c *TextBlock) isValidEvent(eventName string) bool {
	for _, e := range c.events {
		if e.Event == eventName {
			return true
		}
	}
	return false
}

func (c *TextBlock) isValidBlock(block interface{}) bool {
	if block == nil {
		return false
	}
	m, ok := block.(map[string]interface{})
	if !ok {
		return false
	}
	_, hasKey := m["key"]
	_, hasKeyType := m["keyType"]
	return hasKey && hasKeyType
}

func (c *TextBlock) ModifyProperty(key, valueMobile, valueTablet, valueDesktop string) *TextBlock {
	for i, p := range c.properties {
		if p.Key == key {
			c.properties[i].ValueMobile = valueMobile
			c.properties[i].ValueTablet = valueTablet
			c.properties[i].ValueDesktop = valueDesktop
			break
		}
	}
	return c
}

func (c *TextBlock) AssignData(key, value string) *TextBlock {
	for i, d := range c.data {
		if d.Key == key {
			c.data[i].Value = value
			break
		}
	}
	return c
}

func (c *TextBlock) Build() map[string]interface{} {
	result := map[string]interface{}{
		"keyType":            c.keyType,
		"integrationVersion": c.integrationVersion,
		"properties":         c.properties,
		"data":               c.data,
		"key":                c.key,
		"visibilityKey":      c.visibilityKey,
		"slot":               c.slot,
		"slots":              c.slots,
		"actions":            c.actions,
		"blocks":             c.blocks,
	}
	return result
}
