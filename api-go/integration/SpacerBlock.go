// PLEASE DO NOT EDIT THIS FILE, THIS IS GENERATED BY NATIVEBLOCKS

package integration

type SpacerBlockProperty struct {
	Key          string `json:"key"`
	ValueMobile  string `json:"valueMobile"`
	ValueTablet  string `json:"valueTablet"`
	ValueDesktop string `json:"valueDesktop"`
	Type         string `json:"type"`
}

type SpacerBlockData struct {
	Key   string `json:"key"`
	Value string `json:"value"`
	Type  string `json:"type"`
}

type SpacerBlockAction struct {
	Event    string        `json:"event"`
	Triggers []interface{} `json:"triggers"`
}

type SpacerBlockSlot struct {
	Slot string `json:"slot"`
}

type SpacerBlockEvent struct {
	Event string `json:"event"`
}

type SpacerBlock struct {
	keyType            string
	integrationVersion int
	properties         []SpacerBlockProperty
	data               []SpacerBlockData
	events             []SpacerBlockEvent
	actions            []SpacerBlockAction
	blocks             []interface{}
	slots              []SpacerBlockSlot
	visibilityKey      string
	slot               string
	key                string
}

func NewSpacerBlock(_key string, _visibilityKey string, _slot string) SpacerBlock {
	c := SpacerBlock{}
	c.keyType = "SPACER"
	c.key = _key
	c.visibilityKey = _visibilityKey
	c.slot = _slot
	c.actions = make([]SpacerBlockAction, 0)
	c.blocks = make([]interface{}, 0)
	initialProperties := []SpacerBlockProperty{
		{Key: "width", ValueMobile: "wrap", ValueTablet: "wrap", ValueDesktop: "wrap", Type: "STRING"},
		{Key: "height", ValueMobile: "wrap", ValueTablet: "wrap", ValueDesktop: "wrap", Type: "STRING"},
	}
	c.properties = initialProperties

	initialData := []SpacerBlockData{}
	c.data = initialData

	initialSlots := []SpacerBlockSlot{}
	c.slots = initialSlots

	initialEvents := []SpacerBlockEvent{}
	c.events = initialEvents

	return c
}

func (c *SpacerBlock) isValidEvent(eventName string) bool {
	for _, e := range c.events {
		if e.Event == eventName {
			return true
		}
	}
	return false
}

func (c *SpacerBlock) isValidBlock(block interface{}) bool {
	if block == nil {
		return false
	}
	m, ok := block.(map[string]interface{})
	if !ok {
		return false
	}
	_, hasKey := m["key"]
	_, hasKeyType := m["keyType"]
	return hasKey && hasKeyType
}

func (c *SpacerBlock) ModifyProperty(key, valueMobile, valueTablet, valueDesktop string) *SpacerBlock {
	for i, p := range c.properties {
		if p.Key == key {
			c.properties[i].ValueMobile = valueMobile
			c.properties[i].ValueTablet = valueTablet
			c.properties[i].ValueDesktop = valueDesktop
			break
		}
	}
	return c
}

func (c *SpacerBlock) Build() map[string]interface{} {
	result := map[string]interface{}{
		"keyType":            c.keyType,
		"integrationVersion": c.integrationVersion,
		"properties":         c.properties,
		"data":               c.data,
		"key":                c.key,
		"visibilityKey":      c.visibilityKey,
		"slot":               c.slot,
		"slots":              c.slots,
		"actions":            c.actions,
		"blocks":             c.blocks,
	}
	return result
}
