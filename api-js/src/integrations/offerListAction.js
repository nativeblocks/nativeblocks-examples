// PLEASE DO NOT EDIT THIS FILE, THIS IS GENERATED BY NATIVEBLOCKS 
class offerListAction {
  keyType;
  integrationVersion;
  properties;
  data;
  events;
  triggers;
  name;
  then;

  constructor(config = {}) {
    this.keyType = "OFFER_LIST";
    this.triggers = [];
    this.name = config.name;
    this.then = config.then;
    this.integrationVersion = 1;
    this.properties = [];
    this.data = [];
    this.events = [];
    const initialProperties = [
      { key: "endpoint", value: "", type: "STRING" },
    ];
    this.properties.push(...initialProperties);
    const initialData = [
    ];
    this.data.push(...initialData);
    const initialEvents = [
      { event: "END" },
    ];
    this.events.push(...initialEvents);
  }

  isValidEvent(eventName) {
    return this.events.some(e => e.event === eventName);
  }

  isValidTrigger(trigger) {
    return trigger && 
           typeof trigger === "object" && 
           trigger.name && 
           trigger.keyType && 
           trigger.then;
  }

  addTrigger(trigger) {
    if (!this.isValidEvent(trigger.then)) {
      throw new Error(`Invalid then: ${trigger.then}. Must be one of: ${this.events.map(e => e.event).join(", ")}`);
    }
    if (!this.isValidTrigger(trigger)) {
      throw new Error("Invalid trigger: Trigger must be an object with name, keyType, and then");
    }
    this.triggers.push({
      name: trigger.name,
      keyType: trigger.keyType,
      then: trigger.then,
      properties: trigger.properties || [],
      data: trigger.data || [],
      triggers: trigger.triggers || []
    });
    return this;
  }

  modifyProperty(key, value) {
    const propIndex = this.properties.findIndex(p => p.key === key);
    if (propIndex !== -1) {
      this.properties[propIndex] = { ...this.properties[propIndex], value };
    }
    return this;
  }

  assignData(key, value) {
    const dataIndex = this.data.findIndex(d => d.key === key);
    if (dataIndex !== -1) {
      this.data[dataIndex] = { ...this.data[dataIndex], value };
    }
    return this;
  }

  build() {
    return {
      keyType: this.keyType,
      name: this.name,
      then: this.then,
      triggers: this.triggers,
      data: this.data,
      properties: this.properties,
      integrationVersion: this.integrationVersion,
    };
  }
}

module.exports = offerListAction;
