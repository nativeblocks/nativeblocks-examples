// PLEASE DO NOT EDIT THIS FILE, THIS IS GENERATED BY NATIVEBLOCKS 
class spacerBlock {
  keyType;
  integrationVersion;
  properties;
  data;
  events;
  actions;
  blocks;
  slots;
  visibilityKey;
  slot;
  key;

  constructor(config = {}) {
    this.keyType = "SPACER";
    this.key = config.key;
    this.visibilityKey = config.visibilityKey;
    this.slot = config.slot;
    this.actions = [];
    this.blocks = [];
    this.slots = [];
    this.integrationVersion = 2;
    this.properties = [];
    this.data = [];
    this.events = [];
    const initialProperties = [
      { key: "width", valueMobile: "wrap", valueTablet: "wrap", valueDesktop: "wrap", type: "STRING" },
      { key: "height", valueMobile: "wrap", valueTablet: "wrap", valueDesktop: "wrap", type: "STRING" },
    ];
    this.properties.push(...initialProperties);
    const initialData = [
    ];
    this.data.push(...initialData);
    const initialSlots = [
    ];
    this.slots.push(...initialSlots);
    const initialEvents = [
    ];
    this.events.push(...initialEvents);
  }

  isValidEvent(eventName) {
    return this.events.some(e => e.event === eventName);
  }

  isValidBlock(block) {
    return block && 
           typeof block === "object" && 
           block.key && 
           block.keyType;
  }

  addAction(event, triggers) {
    if (!this.isValidEvent(event)) {
      throw new Error(`Invalid event: ${event}. Must be one of: ${this.events.map(e => e.event).join(", ")}`);
    }
    const action = { event, triggers: triggers };
    this.actions.push(action);
    return this;
  }

  getAction(event) {
    return this.actions.find(a => a.event === event);
  }

  addBlock(block) {
    if (!this.isValidBlock(block)) {
      throw new Error("Invalid block: Block must be an object with at least key and keyType");
    }
    this.blocks.push(block);
    return this;
  }

  getBlock(key) {
    return this.blocks.find(b => b.key === key);
  }

  getBlocks() {
    return [...this.blocks];
  }

  modifyProperty(key, valueMobile, valueTablet, valueDesktop) {
    const propIndex = this.properties.findIndex(p => p.key === key);
    if (propIndex !== -1) {
      this.properties[propIndex] = { ...this.properties[propIndex], valueMobile, valueTablet, valueDesktop };
    }
    return this;
  }

  assignData(key, value) {
    const dataIndex = this.data.findIndex(d => d.key === key);
    if (dataIndex !== -1) {
      this.data[dataIndex] = { ...this.data[dataIndex], value };
    }
    return this;
  }

  build() {
    return {
      keyType: this.keyType,
      key: this.key,
      visibilityKey: this.visibilityKey,
      slot: this.slot,
      slots: this.slots,
      actions: this.actions,
      blocks: this.blocks,
      data: this.data,
      properties: this.properties,
      integrationVersion: this.integrationVersion,
    };
  }
}

module.exports = spacerBlock;
