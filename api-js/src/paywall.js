const buildWithNativeblocks = require("./run-nativeblocks");
const rootBlock = require("./integrations/rootBlock");
const columnBlock = require("./integrations/columnBlock");
const buttonBlock = require("./integrations/buttonBlock");
const offerListAction = require("./integrations/offerListAction");
const {getUsers} = require("./userRepository");

const getPaywallFrame = async () => {
  const features = [
    "Secured 2FA storage",
    "End-to-end encryption",
    "Private Browser",
    "No ads and no limits",
  ];

  let button = null;
  const users = await getUsers()
  users.forEach(user => {
    if (user.id % 2) {
      button = new buttonBlock({
        key: "button",
        slot: "content",
        visibilityKey: "button-visible"
      })
        .assignData("text", "yearly_price")
        .assignData("enable", "button_visible")
        .addAction("onClick", [
          new offerListAction({
            name: "offers",
            then: "NEXT"
          })
            .modifyProperty("endpoint", "https://example.com")
            .build()
        ])
        .build()
    } else {
      button = new buttonBlock({
        key: "button",
        slot: "content",
        visibilityKey: "button-visible"
      })
        .assignData("text", "monthly_price")
        .assignData("enable", "button_visible")
        .modifyProperty("endpoint", "https://example.com")
        .addAction("onClick", [
          new offerListAction({
            name: "offers",
            then: "END"
          })
            .modifyProperty("endpoint", "https://example.com")
            .build()
        ])
        .build()
    }
  })

  const frame = {
    $schema: "https://raw.githubusercontent.com/nativeblocks/nativeblocks-examples/main/api-js/sample.schema.json", // USE YOUR CUSTOM SCHEMA GENERATED BY NATIVEBLOCKS
    name: "PaywallFrame",
    route: "paywall",
    isStarter: false,
    type: "FRAME",
    variables: [
      {
        key: "root_visible",
        value: "true",
        type: "BOOLEAN",
      },
      {
        key: "main_container_visible",
        value: "true",
        type: "BOOLEAN",
      },
      {
        key: "features_container_visible",
        value: "true",
        type: "BOOLEAN",
      },
      {
        key: "check_icon_source",
        value: "check",
        type: "STRING",
      },
      {
        key: "yearly_price",
        value: `Yearly: 29.99`,
        type: "STRING",
      },
      {
        key: "monthly_price",
        value: `Monthly: 35.99`,
        type: "STRING",
      },
      {
        key: "button-visible",
        value: "true",
        type: "BOOLEAN",
      },
      ...features.map((_, index) => ({
        key: `feature_${index + 1}_visible`,
        value: "true",
        type: "BOOLEAN",
      })),
      ...features.map((feature, index) => ({
        key: `feature_${index + 1}_text`,
        value: feature,
        type: "STRING",
      })),
    ],
    blocks: [
      new rootBlock({
        key: "root",
        visibilityKey: "root_visible",
        slot: "null",
      })
        .addAction("onAppear", [
          new offerListAction({
            name: "offers2",
            then: "END"
          })
            .modifyProperty("endpoint", "https://example2.com")
            // .addTrigger(
            //   new offerListAction({
            //     name: "innerOffer",
            //     then: "END"
            //   })
            //     .modifyProperty("endpoint", "https://example2.com")
            //     .build()
            // )
            .build()
        ])
        .addBlock(
          new columnBlock({
            key: "col",
            visibilityKey: "col-visible",
            slot: "content",
          })
            .modifyProperty("width", "match", "match", "match")
            .modifyProperty("height", "match", "match", "match")
            .addBlock(button)
            .build()
        ).build()
    ],
  };

  return buildWithNativeblocks(frame)
};

module.exports = {getPaywallFrame};
