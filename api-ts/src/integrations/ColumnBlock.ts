// PLEASE DO NOT EDIT THIS FILE, THIS IS GENERATED BY NATIVEBLOCKS

interface IProperty {
  key: string;
  valueMobile: string;
  valueTablet: string;
  valueDesktop: string;
  type: string;
}

interface IData {
  key: string;
  value: any;
  type: string;
}

interface IAction {
  event: string;
  triggers: any[];
}

interface ISlot {
  slot: string;
}

interface IEvent {
  event: string;
}

export class ColumnBlock {
  private readonly keyType: string;
  private readonly integrationVersion: number;
  private properties: IProperty[];
  private data: IData[];
  private readonly events: IEvent[];
  private actions: IAction[];
  private blocks: any[];
  private readonly slots: ISlot[];
  private readonly visibilityKey?: string;
  private readonly slot?: string;
  private readonly key: string;

  constructor(config: {
    key: string;
    visibilityKey?: string;
    slot?: string;
  } = {} as any) {
    this.keyType = "COLUMN";
    this.key = config.key;
    this.visibilityKey = config.visibilityKey;
    this.slot = config.slot;
    this.actions = [];
    this.blocks = [];
    this.slots = [];
    this.integrationVersion = 4;
    this.properties = [];
    this.data = [];
    this.events = [];
    const initialProperties: IProperty[] = [
      { key: "verticalArrangement", valueMobile: "top", valueTablet: "top", valueDesktop: "top", type: "STRING" },
      { key: "horizontalAlignment", valueMobile: "top", valueTablet: "top", valueDesktop: "top", type: "STRING" },
      { key: "width", valueMobile: "wrap", valueTablet: "wrap", valueDesktop: "wrap", type: "STRING" },
      { key: "height", valueMobile: "wrap", valueTablet: "wrap", valueDesktop: "wrap", type: "STRING" },
      { key: "paddingStart", valueMobile: "8.0", valueTablet: "8.0", valueDesktop: "8.0", type: "DOUBLE" },
      { key: "paddingTop", valueMobile: "8.0", valueTablet: "8.0", valueDesktop: "8.0", type: "DOUBLE" },
      { key: "paddingEnd", valueMobile: "8.0", valueTablet: "8.0", valueDesktop: "8.0", type: "DOUBLE" },
      { key: "paddingBottom", valueMobile: "8.0", valueTablet: "8.0", valueDesktop: "8.0", type: "DOUBLE" },
      { key: "background", valueMobile: "#ffffffff", valueTablet: "#ffffffff", valueDesktop: "#ffffffff", type: "STRING" },
      { key: "direction", valueMobile: "LTR", valueTablet: "LTR", valueDesktop: "LTR", type: "STRING" },
      { key: "radiusTopStart", valueMobile: "4.0", valueTablet: "4.0", valueDesktop: "4.0", type: "DOUBLE" },
      { key: "radiusTopEnd", valueMobile: "4.0", valueTablet: "4.0", valueDesktop: "4.0", type: "DOUBLE" },
      { key: "radiusBottomStart", valueMobile: "4.0", valueTablet: "4.0", valueDesktop: "4.0", type: "DOUBLE" },
      { key: "radiusBottomEnd", valueMobile: "4.0", valueTablet: "4.0", valueDesktop: "4.0", type: "DOUBLE" },
    ];
    this.properties.push(...initialProperties);
    const initialData: IData[] = [
    ];
    this.data.push(...initialData);
    const initialSlots: ISlot[] = [
      { slot: "content" },
    ];
    this.slots.push(...initialSlots);
    const initialEvents: IEvent[] = [
      { event: "onClick" },
    ];
    this.events.push(...initialEvents);
  }

  private isValidEvent(eventName: string): boolean {
    return this.events.some((e) => e.event === eventName);
  }

  private isValidBlock(block: any): boolean {
    return block &&
           typeof block === "object" &&
           block.key &&
           block.keyType;
  }

  public addAction(event: string, triggers: any[]): this {
    if (!this.isValidEvent(event)) {
      throw new Error(`Invalid event: ${event}. Must be one of: ${this.events.map((e) => e.event).join(", ")}`);
    }
    const action: IAction = { event, triggers };
    this.actions.push(action);
    return this;
  }

  public getAction(event: string): IAction | undefined {
    return this.actions.find((a) => a.event === event);
  }

  public addBlock(block: any): this {
    if (!this.isValidBlock(block)) {
      throw new Error("Invalid block: Block must be an object with at least key and keyType");
    }
    this.blocks.push(block);
    return this;
  }

  public getBlock(key: string): any {
    return this.blocks.find((b) => b.key === key);
  }

  public getBlocks(): any[] {
    return [...this.blocks];
  }

  public modifyProperty(key: string, valueMobile: string, valueTablet: string, valueDesktop: string): this {
    const propIndex = this.properties.findIndex((p) => p.key === key);
    if (propIndex !== -1) {
      this.properties[propIndex] = { ...this.properties[propIndex], valueMobile, valueTablet, valueDesktop };
    }
    return this;
  }

  public assignData(key: string, value: any): this {
    const dataIndex = this.data.findIndex((d) => d.key === key);
    if (dataIndex !== -1) {
      this.data[dataIndex] = { ...this.data[dataIndex], value };
    }
    return this;
  }

  public build(): any {
    return {
      keyType: this.keyType,
      key: this.key,
      visibilityKey: this.visibilityKey,
      slot: this.slot,
      slots: this.slots,
      actions: this.actions,
      blocks: this.blocks,
      data: this.data,
      properties: this.properties,
      integrationVersion: this.integrationVersion,
    };
  }
}
